import { isArray } from '@vue/shared'
import type { VNode } from '../vnode'

// #6651 res can be undefined in SSR in string push mode
type SSRSlot = (...args: any[]) => VNode[] | undefined

interface CompiledSlotDescriptor {
  name: string
  fn: SSRSlot // 实际插槽函数 是运行时调用的插槽渲染函数；
  key?: string // 仅条件分支插槽（v-if）才有 key。 如果有 key，表示它是一个条件分支（需要在 vnode 上打 key 标识，以便 diff 时识别）。
}

/**
 * Compiler runtime helper for creating dynamic slots object
 * @private
 */
// 由模板编译器在处理 v-if / v-for 条件插槽时自动生成，用于创建“动态插槽”对象。
// 将编译器生成的静态插槽 (slots) 和动态插槽描述数组 (dynamicSlots) 合并为一个完整的 slots 对象，供运行时渲染使用。
export function createSlots(
  // 来自 <slot name="..."> 或静态 <template #foo> 的插槽函数集合；
  // 静态插槽都是确定的，不依赖条件。
  slots: Record<string, SSRSlot>,
  // 编译器收集的动态插槽描述信息：
  // 包括 v-if、v-for 语法下生成的插槽；
  // 可能是一个数组（来自 v-for）；
  // 也可能是一个对象（来自 v-if）。
  dynamicSlots: (
    | CompiledSlotDescriptor
    | CompiledSlotDescriptor[]
    | undefined
  )[],
): Record<string, SSRSlot> {
  // 遍历每一个 dynamicSlots 条目
  for (let i = 0; i < dynamicSlots.length; i++) {
    // slot 可能是单个插槽对象，也可能是一个插槽数组（v-for）；
    // undefined 的情况也允许（动态条件未命中）。
    const slot = dynamicSlots[i]
    // array of dynamic slot generated by <template v-for="..." #[...]>
    // 处理数组型插槽（来自 v-for）
    if (isArray(slot)) {
      for (let j = 0; j < slot.length; j++) {
        slots[slot[j].name] = slot[j].fn
      }
    } else if (slot) {
      // conditional single slot generated by <template v-if="..." #foo>
      // 处理单个动态插槽（来自 v-if）
      // 如果插槽来自 <template v-if>，则加 key 标识：
      // 这样每个分支生成的内容在 vnode 层被视为不同 fragment；
      // 有助于正确的 DOM diff。
      slots[slot.name] = slot.key
        ? (...args: any[]) => {
            const res = slot.fn(...args)
            // attach branch key so each conditional branch is considered a
            // different fragment
            if (res) (res as any).key = slot.key
            return res
          }
        : slot.fn
    }
  }
  return slots
}
